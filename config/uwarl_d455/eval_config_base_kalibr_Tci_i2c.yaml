%YAML 1.0
---
#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1
num_of_cam: 3

imu_topic: "/cam_EE/imu"
image0_topic: "/kalibr/infra1"
image1_topic: "/kalibr/infra2"
image2_topic: "/kalibr/color"

cam0_calib: "left_EE.yaml"
cam1_calib: "right_EE.yaml"
cam2_calib: "right_EE.yaml"

image_width: 1280
image_height: 720

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2: unknown, auto-calib on-fly


body_T_cam0: !!opencv-matrix
    rows: 4
    cols: 4
    dt: d
    data: [0.9999103510128545, 0.0022200278858102553, -0.01320459819669458, 0.024039307138982408,
            -0.002268249718240495, 0.9999908098029827, -0.00363804243934406, -0.004086319812280787,
            0.013196400288170514, 0.0036676676186633123, 0.9999061972173556, -0.030771588639387584,
            0.0, 0.0, 0.0, 1.0]
body_T_cam1: !!opencv-matrix
    rows: 4
    cols: 4
    dt: d
    data: [ 0.9999141966685308, 0.002059337685506455, -0.012936708585411186, -0.0707482482804897,
            -0.0021133877039494816, 0.9999890899820127, -0.004165754356506563, -0.004221296848844892,
            0.012927988750752909, 0.004192737201758678, 0.9999076397656023, -0.031923695077705615,
            0.0, 0.0, 0.0, 1.0]
body_T_cam2: !!opencv-matrix
    rows: 4
    cols: 4
    dt: d
    # imu0 to cam0 : Tci
    data: [ 0.9998570488224622, -0.0008425088140642216, -0.016887039377431388, -0.04036150235533812,
            0.0007878931090668004, 0.9999944389465729, -0.003240570995632523, -0.00209621806005239,
            0.016889675677329605, 0.0032268025702347843, 0.9998521523708831, -0.03862111584785017,
            0.0, 0.0, 0.0, 1.0 ]
#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.176           # accelerometer measurement noise standard deviation. #0.2   0.04
acc_w: 0.008         # accelerometer bias random work noise standard deviation.  #0.002
gyr_n: 0.029          # gyroscope measurement noise standard deviation.     #0.05  0.004
gyr_w: 0.0001655        # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.8         # gravity magnitude

#unsynchronization parameters
estimate_td: 0.0022423294165478357         # online estimate time offset between camera and imu
td: 0 # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 0                      # save image in pose graph for visualization prupose; you can close this function by setting 0 
