%YAML 1.0
---
#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 1

imu_topic: "/cam_EE/imu"
image0_topic: "/cam_EE/color/image_raw"
output_path: "output/"

cam0_calib: "color_EE_mei.yaml"
image_width: 1280
image_height: 720

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2: unknown, auto-calib on-fly

body_T_cam0: !!opencv-matrix
    rows: 4
    cols: 4
    dt: d
    data: [ 0.99991385, 0.00086815, 0.01309728, 0.03721934,
            -0.00089894, 0.99999685, 0.00234506, 0.00264814,
            -0.01309521, -0.00235664, 0.99991148, 0.03293071,
             0., 0., 0., 1. ]
    # NOTE: it is verified that the parameters are T_ic, not T_ci from the kalibr defaults, as shown below:
    # data: [ 0.999913850037538, -0.0008989369247734065, -0.013095205821728498, -0.036782519366628755,
    #         0.0008681482545597033, 0.9999968462890269, -0.0023566354424758335, -0.002602842432194439,
    #         0.013097282989851673, 0.002345063838343694, 0.999911477008779, -0.03342147814095409,
    #         0.0, 0.0, 0.0, 1.0 ]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.176           # accelerometer measurement noise standard deviation. #0.2   0.04
acc_w: 0.008         # accelerometer bias random work noise standard deviation.  #0.002
gyr_n: 0.029          # gyroscope measurement noise standard deviation.     #0.05  0.004
gyr_w: 0.0001655        # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.8         # gravity magnitude
# #imu parameters       The more accurate parameters you provide, the better performance
# acc_n: 0.1           # accelerometer measurement noise standard deviation. #0.2   0.04
# acc_w: 0.008         # accelerometer bias random work noise standard deviation.  #0.002
# gyr_n: 0.02          # gyroscope measurement noise standard deviation.     #0.05  0.004
# gyr_w: 0.0002        # gyroscope bias random work noise standard deviation.     #4.0e-5
# g_norm: 9.8         # gravity magnitude

#unsynchronization parameters
estimate_td: 0.00021768395613411596         # online estimate time offset between camera and imu
td: 0 # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 0                      # save image in pose graph for visualization prupose; you can close this function by setting 0 
